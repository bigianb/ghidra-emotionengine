# Standard MIPS instruction set

# General purpose registers (128-bit)
define register offset=0 size=16 [
    zero_qw at_qw v0_qw v1_qw
    a0_qw a1_qw a2_qw a3_qw
    t0_qw t1_qw t2_qw t3_qw
    t4_qw t5_qw t6_qw t7_qw
    s0_qw s1_qw s2_qw s3_qw
    s4_qw s5_qw s6_qw s7_qw
    t8_qw t9_qw k0_qw k1_qw
    gp_qw sp_qw s8_qw ra_qw
    pc_qw
];

# other registers
define register offset=0x220 size=8 [ fsa ];       # 64 bit
define register offset=0x300 size=16 [ hi_qw lo_qw ];	    # 128 bit
define register offset=0x300 size=8 [ hi hi1 lo lo1 tsp ];  #64 bit

#64 bit representation of the 128 bit registers
define register offset=0 size=8 [
    zero zero_udw at at_udw v0 v0_udw v1 v1_udw
    a0 a0_udw a1 a1_udw a2 a2_udw a3 a3_udw
    t0 t0_udw t1 t1_udw t2 t2_udw t3 t3_udw
    t4 t4_udw t5 t5_udw t6 t6_udw t7 t7_udw
    s0 s0_udw s1 s1_udw s2 s2_udw s3 s3_udw
    s4 s4_udw s5 s5_udw s6 s6_udw s7 s7_udw
    t8 t8_udw t9 t9_udw k0 k0_udw k1 k1_udw
    gp gp_udw sp sp_udw s8 s8_udw ra ra_udw
    pc pc_udw
];

# 32 bit representation of the 128 bit registers
define register offset=0 size=4 [
    zero_lo zero_hi _ _ at_lo at_hi _ _ v0_lo v0_hi _ _ v1_lo v1_hi _ _
    a0_lo a0_hi _ _ a1_lo a1_hi _ _ a2_lo a2_hi _ _ a3_lo a3_hi _ _
    t0_lo t0_hi _ _ t1_lo t1_hi _ _ t2_lo t2_hi _ _ t3_lo t3_hi _ _
    t4_lo t4_hi _ _ t5_lo t5_hi _ _ t6_lo t6_hi _ _ t7_lo t7_hi _ _
    s0_lo s0_hi _ _ s1_lo s1_hi _ _ s2_lo s2_hi _ _ s3_lo s3_hi _ _
    s4_lo s4_hi _ _ s5_lo s5_hi _ _ s6_lo s6_hi _ _ s7_lo s7_hi _ _
    t8_lo t8_hi _ _ t9_lo t9_hi _ _ k0_lo k0_hi _ _ k1_lo k1_hi _ _
    gp_lo gp_hi _ _ sp_lo sp_hi _ _ s8_lo s8_hi _ _ ra_lo ra_hi _ _
    pc_lo pc_hi _ _
];

define token instr(32)
    prime       = (26,31)
    op32		= (0,31)
    base        = (21,25)

    rs128		= (21,25)
    rt128		= (16,20)
    rd128		= (11,15)

    rs32		= (21,25)
    rt32		= (16,20)
    rd32		= (11,15)

    rs			= (21,25)
    rt			= (16,20)
    rd			= (11,15)
    sa			= (6,10)

    hint        = (16,20)
    cond		= (16,20)
    szero       = (11,25)
    code		= (6,15)
    stype       = (6,10)
    zero5       = (6,10)
    zero10		= (6,15)
    breakcode	= (6,25)

    immed       = (0,15)
    immed26     = (0,25)
    simmed      = (0,15) signed
    imm15       = (6,20)

    off21		= (0,20) signed		# 21 bit signed offset in conditional branch/link
    off16		= (0,15) signed		# 16 bit signed offset in conditional branch/link
    off26		= (0,25) signed		# 26 bit signed offset in conditional branch/link
    ind26		= (0,25) 			# 26 bit absolute address

    fct         = (0,5)
    mmiop       = (6,10)
    fmt         = (6,10)

    ft128       = (16,20)
    fd128       = (11,15)
    fs128       = (11,15)

# cop stuff
	bit25		= (25,25)
	copop		= (21,25)
	copfct		= (16,20)

    rd0			= (11,15)

	copfill     = (6,24)
	op			= (16,20)
	mfcop		= (0,10)
	reg0		= (2,5)
	reg			= (1,1)

	bit0 		= (0,0)

# cop1 stuff
    format      = (21,25)
    fr          = (21,25)
    ft          = (16,20)
    fs          = (11,15)
    fs_fcr		= (11,15)
    fd          = (6,10)
    bigfunct	= (0,10)

# cop2 stuff
	vubc	= (0,1)
	vufd	= (6,10)
	vufdw	= (6,10)
	vufdx	= (6,10)
	vufdy	= (6,10)
	vufdz	= (6,10)
	vufdqm  = (11,15)
	vufs	= (11,15)
	vufsw	= (11,15)
	vufsx	= (11,15)
	vufsy	= (11,15)
	vufsz	= (11,15)
	vuccid	= (11,15)
	vuft	= (16,20)
	vuftw	= (16,20)
	vuftx	= (16,20)
	vufty	= (16,20)
	vuftz	= (16,20)
	vufsf	= (21,22)
	vuftf	= (23,24)
	vudest	= (21,24)
	vudestx	= (24,24)
	vudesty	= (23,23)
	vudestz	= (22,22)
	vudestw	= (21,21)
	vuco	= (25,25)
	vucop2	= (26,31)
	vuop0	= (2,5)
	vuop1	= (0,5)
	vuop2	= (2,10)
	vuop3	= (0,10)
	vuop4	= (0,10)
	vuop5	= (0,5)
	vuop6	= (0,5)
	vuop11	= (21,25)
	vuop12	= (26,31)
	vuop13	= (16,25)
	vuimm5	= (6,10)
	vurd	= (11,15)
	vuid	= (6,10)
	vuis	= (11,15)
	vuit	= (16,20)
	vurt	= (16,20)
	vuimm15	= (6,20)
	vu_1_10 = (1,10)

	# extra bit checks
	bit5 = (5,5)
	bit1 = (1,1)
;

define token inst_long(64)
    vucI_L=(63,63) # 1 when next instruction is loi
    vucE_L=(62,62) # return to micro mode after this instruction
    vucM_L=(61,61) # 1 to disable QMTC2/CTC2 interlock
    vucD_L=(60,60) # 1 for debug break
    vucT_L=(59,59) # 1 for debug halt
    vuMicro=(57,58)
    longnop=(0,55)
    vudest_L=(53,56)
    vuft_L=(48,52)
    vufs_L=(43,47)
    vufd_L=(38,42)
    vuop_32_37=(32,37)
    vuop_32_42=(32,42)
    vulop11_L=(32,42)
    immfloat=(0,31)
;

define register offset=0x350 size=4 contextreg;
define context contextreg
    microMode=(0,0)
    cM=(1,1)
    cE=(2,2) noflow
    cUpper=(3,3) noflow
	bcflag=(4,4) noflow
	iflag=(5,5) noflow
	qflag=(6,6) noflow
	accflag=(7,7) noflow
;

# 64 bit
attach variables [ rs rt rd base ] [
    zero  at  v0  v1  a0  a1  a2  a3
    t0    t1  t2  t3  t4  t5  t6  t7
    s0    s1  s2  s3  s4  s5  s6  s7
    t8    t9  k0  k1  gp  sp  s8  ra
];

# 128 bit
attach variables [ rs128 rt128 rd128 ] [
    zero_qw  at_qw  v0_qw  v1_qw  a0_qw  a1_qw  a2_qw  a3_qw
    t0_qw    t1_qw  t2_qw  t3_qw  t4_qw  t5_qw  t6_qw  t7_qw
    s0_qw    s1_qw  s2_qw  s3_qw  s4_qw  s5_qw  s6_qw  s7_qw
    t8_qw    t9_qw  k0_qw  k1_qw  gp_qw  sp_qw  s8_qw  ra_qw
];

# 32 bit
attach variables [ rs32 rt32 rd32 ] [
    zero_lo  at_lo  v0_lo  v1_lo  a0_lo  a1_lo  a2_lo  a3_lo
    t0_lo    t1_lo  t2_lo  t3_lo  t4_lo  t5_lo  t6_lo  t7_lo
    s0_lo    s1_lo  s2_lo  s3_lo  s4_lo  s5_lo  s6_lo  s7_lo
    t8_lo    t9_lo  k0_lo  k1_lo  gp_lo  sp_lo  s8_lo  ra_lo
];

#different sized registers
RD128: rd        is rd & rd128      { export rd128; }
RS128src: rs     is rs & rs128      { export rs128; }
RT128: rt        is rt & rt128      { export rt128; }
RT128src: rt     is rt & rt128      { export rt128; }

RD: rd      	is rd	        	{ export rd; }
RSsrc: rs   	is rs	        	{ export rs; }
RSsrc: rs   	is rs & rs=0      	{ export 0:8; }
RT: rt      	is rt	        	{ export rt; }
RTsrc: rt   	is rt	        	{ export rt; }
RTsrc: rt   	is rt & rt=0	    { export 0:8; }

RD32: rd      	is rd & rd32        { export rd32; }
RS32src: rs   	is rs & rs32        { export rs32; }
RS32src: rs   	is rs & rs32=0      { export 0:4; }
RT32: rt      	is rt & rt32        { export rt32; }
RT32src: rt   	is rt & rt32        { export rt32; }
RT32src: rt   	is rt & rt32=0      { export 0:4; }

# relative offsets
Rel16: reloc		is off16	[ reloc=inst_start+4+4*off16; ]					{ export *:4 reloc; }
Abs26: reloc		is ind26	[ reloc=((inst_start+4) $and 0xfffffffff0000000) | 4*ind26; ]	{ export *:4 reloc; }

OFF_BASE: simmed(base)  	is simmed & base    { tmp:4 = base:4 + simmed; export tmp; }

#VU_IMM15: result is vuop_0_10 & vuop_21_24 [ result = (vuop_21_24 << 11) $or vuop_0_10; ] { tmp:2 = result; export tmp; }
VU_IMM15: result is imm15 [ result = imm15*8; ] { export *[vumem]:4 result; }
#VU_IMM12_UP6: u6 is vuop_0_10 & vuop_21_24 [ u6=(((vuop_21_24 $and 0x1) << 6) | (vuop_0_10 >> 6)) << 6; ]{ tmp:1 = u6; export tmp; }
